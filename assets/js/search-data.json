{
  
    
        "post0": {
            "title": "MNIST Classifier Model",
            "content": "Getting data and viewing path . path = untar_data(URLs.MNIST) path.ls() . (#2) [Path(&#39;/storage/data/mnist_png/training&#39;),Path(&#39;/storage/data/mnist_png/testing&#39;)] . (path/&quot;training/1&quot;).ls() . (#6742) [Path(&#39;/storage/data/mnist_png/training/1/42690.png&#39;),Path(&#39;/storage/data/mnist_png/training/1/49817.png&#39;),Path(&#39;/storage/data/mnist_png/training/1/12078.png&#39;),Path(&#39;/storage/data/mnist_png/training/1/5862.png&#39;),Path(&#39;/storage/data/mnist_png/training/1/36368.png&#39;),Path(&#39;/storage/data/mnist_png/training/1/57223.png&#39;),Path(&#39;/storage/data/mnist_png/training/1/37725.png&#39;),Path(&#39;/storage/data/mnist_png/training/1/54103.png&#39;),Path(&#39;/storage/data/mnist_png/training/1/29986.png&#39;),Path(&#39;/storage/data/mnist_png/training/1/18207.png&#39;)...] . This is what the data looks like . t = (path/&quot;training/1&quot;).ls() t_1 = Image.open(t[0]) t_1 . show_image(tensor(t_1)) . &lt;AxesSubplot:&gt; . Loading data appropriately . def load_data(folder): dataList = [] labelList = [] for num in range(10): data_path = (path/folder/f&#39;{num}&#39;).ls().sorted() #getting path stackedData = torch.stack([tensor(Image.open(o)) for o in data_path]) #Open each image and stack them stackedData = stackedData.float()/255.0 #squishing between 0-1 dataList.append(stackedData) #adding to dataList labelList.extend([num]*len(data_path))#extending labelList #Convert so that each image data is in each row train_x = torch.cat(dataList).view(-1, 28*28) train_y = tensor(labelList) return train_x, train_y train_x, train_y = load_data(&quot;training&quot;) test_x, test_y = load_data(&quot;testing&quot;) . Creating dataloaders (Minibatches) . train_dset = list(zip(train_x,train_y)) valid_dset = list(zip(test_x,test_y)) dl_train = DataLoader(train_dset, batch_size=256) dl_test = DataLoader(valid_dset, batch_size=256) . Below is the functions we need to train and test the model . def calc_grad(xb, yb, model): preds = model(xb) loss = F.cross_entropy(preds, yb) loss.backward() def train_epoch(model): for xb,yb in dl_train: calc_grad(xb, yb, model) for p in params: p.data -= p.grad.data * lr p.grad.zero_() def batch_accuracy(xb, yb): pred = xb.softmax(1) return batch_accuracy_helper(pred, yb)/float(yb.size(0)) def batch_accuracy_helper(preds, yb): return preds.argmax(dim=1).eq(yb).sum().float() def validate_epoch(model): accs = [batch_accuracy(model(xb), yb) for xb,yb in dl_test] return round(torch.stack(accs).mean().item(), 4) def linear_layer(xb): return xb@w + b def init_params(x, var=1.0): return (torch.randn(x)*var).requires_grad_() . Begin by initializing parameters . lr = 1. w = init_params((28*28,10)) b = init_params(10) params = w, b w.shape, b.shape . (torch.Size([784, 10]), torch.Size([10])) . Now lets see if our loss improves for 1 epoch . validate_epoch(linear_layer) . 0.1534 . train_epoch(linear_layer) validate_epoch(linear_layer) . 0.1814 . It improved, so now lets train the model . def train_model(model, epochs): for i in range(epochs): train_epoch(model) print(validate_epoch(model), end=&#39; &#39;) train_model(linear_layer, 20) . 0.255 0.3079 0.3501 0.3783 0.4011 0.4184 0.4319 0.442 0.4507 0.4583 0.4647 0.4711 0.4758 0.4803 0.4833 0.4862 0.488 0.4887 0.4906 0.4925 . We can do all of the above very easily by using FastAI toolkit . Additionally, I will also add some nonlinearity this time . dls = DataLoaders(dl_train, dl_test) simple_net = nn.Sequential( nn.Linear(28*28,30), #30 neurons nn.ReLU(), nn.Linear(30, 10) # 30neurons into 10 output neurons (10 classes) ) learn = Learner(dls, simple_net, opt_func=SGD, loss_func=F.cross_entropy, metrics=accuracy) learn.fit(20, .01) . epoch train_loss valid_loss accuracy time . 0 | 1.460385 | 3.105183 | 0.100900 | 00:01 | . 1 | 0.930706 | 2.921132 | 0.101200 | 00:01 | . 2 | 0.712777 | 2.385295 | 0.188500 | 00:01 | . 3 | 0.599163 | 2.020884 | 0.324600 | 00:01 | . 4 | 0.531909 | 1.787350 | 0.385900 | 00:01 | . 5 | 0.485915 | 1.628456 | 0.423500 | 00:01 | . 6 | 0.451067 | 1.514974 | 0.450500 | 00:01 | . 7 | 0.423412 | 1.429631 | 0.472800 | 00:01 | . 8 | 0.400912 | 1.362436 | 0.490200 | 00:01 | . 9 | 0.382621 | 1.307440 | 0.505100 | 00:01 | . 10 | 0.367557 | 1.261222 | 0.519900 | 00:01 | . 11 | 0.355110 | 1.221475 | 0.534200 | 00:01 | . 12 | 0.344696 | 1.186626 | 0.548400 | 00:01 | . 13 | 0.335849 | 1.156045 | 0.562100 | 00:01 | . 14 | 0.328118 | 1.129085 | 0.574200 | 00:01 | . 15 | 0.321477 | 1.104802 | 0.585800 | 00:01 | . 16 | 0.315400 | 1.083139 | 0.597400 | 00:01 | . 17 | 0.310001 | 1.063582 | 0.604800 | 00:01 | . 18 | 0.304906 | 1.045692 | 0.611600 | 00:01 | . 19 | 0.300314 | 1.028769 | 0.617700 | 00:01 | . So it seems that adding nonlinearity increased the accuracy by 10%! .",
            "url": "https://usama280.github.io/PasteBlogs/2021/07/09/MNIST.html",
            "relUrl": "/2021/07/09/MNIST.html",
            "date": " • Jul 9, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Lesson 2 - FastAI",
            "content": "Getting data from online . from pathlib import Path root = Path().cwd()/&quot;images&quot; #rmtree(root) #Deletes all previous images from jmd_imagescraper.core import * duckduckgo_search(root, &quot;Grizzly&quot;, &quot;Grizzly bears&quot;, max_results=100) duckduckgo_search(root, &quot;Black&quot;, &quot;Black bears&quot;, max_results=100) duckduckgo_search(root, &quot;Teddy&quot;, &quot;Teddy bears&quot;, max_results=100) . from jmd_imagescraper.imagecleaner import * display_image_cleaner(root) . From Data to DataLoaders . bears = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = bears.dataloaders(root) #path goes here (I named it root) . dls.valid.show_batch(max_n=4, nrows=1) . bears = bears.new(item_tfms=Resize(128, ResizeMethod.Squish)) dls = bears.dataloaders(root) dls.valid.show_batch(max_n=4, nrows=1) . bears = bears.new(item_tfms=Resize(128, ResizeMethod.Pad, pad_mode=&#39;zeros&#39;)) dls = bears.dataloaders(root) dls.valid.show_batch(max_n=4, nrows=1) . bears = bears.new(item_tfms=RandomResizedCrop(128, min_scale=0.3)) dls = bears.dataloaders(root) dls.train.show_batch(max_n=4, nrows=1, unique=True) . Data Augmentation . bears = bears.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2)) dls = bears.dataloaders(root) dls.train.show_batch(max_n=8, nrows=2, unique=True) . Training Your Model, and Using It to Clean Your Data . bears = bears.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = bears.dataloaders(root) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 1.610175 | 0.412844 | 0.183333 | 00:03 | . epoch train_loss valid_loss error_rate time . 0 | 0.618662 | 0.107484 | 0.050000 | 00:04 | . 1 | 0.442147 | 0.103292 | 0.033333 | 00:04 | . 2 | 0.352873 | 0.157721 | 0.050000 | 00:04 | . 3 | 0.311809 | 0.171524 | 0.050000 | 00:04 | . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . interp.plot_top_losses(5, nrows=1) . cleaner = ImageClassifierCleaner(learn) cleaner . Turning Your Model into an Online Application . Using the Model for Inference . learn.export() . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . learn_inf = load_learner(path/&#39;export.pkl&#39;) . learn_inf.predict(&#39;images/grizzly.jpg&#39;) . uploader = widgets.FileUpload() uploader . Yes I know this picture is kind of unfair . img = PILImage.create(uploader.data[0]) img.to_thumb(192) . learn_inf.dls.vocab . [&#39;Black&#39;, &#39;Grizzly&#39;, &#39;Teddy&#39;] . learn_inf.predict(img) #Still got it right, Nice :) . (&#39;Teddy&#39;, TensorImage(2), TensorImage([8.5309e-07, 2.1513e-07, 1.0000e+00])) . Here I&#39;m trying it with a completely different image . uploader = widgets.FileUpload() uploader . img = PILImage.create(uploader.data[0]) img.to_thumb(192) . learn_inf.predict(img) #Haha its between black bear and teddy bear - thats intresting . (&#39;Teddy&#39;, TensorImage(2), TensorImage([0.4078, 0.1477, 0.4445])) . Creating a Notebook App from the Model . btn_upload = widgets.FileUpload() btn_upload . img = PILImage.create(btn_upload.data[-1]) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . pred,pred_idx,probs = learn_inf.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . VBox([widgets.Label(&#39;Select your bear!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) . Turning Your Notebook into a Real App . . #%watermark -v -m -p pandas,numpy,watermark,fastbook,voila,fastai . Questionnaire . Provide an example of where the bear classification model might work poorly in production, due to structural or style differences in the training data. Since most of the images are of bears caught in good light and close to the camera, it would work poorly if subjected to blurry, far away, poor lighting photos of bears. | Where do text models currently have a major deficiency? They can generate context-appropriate text, but struggle generating correct responses. For example, taking knowledge of medical information to generate medically correct responses. | What are possible negative societal implications of text generation models? Because it can generate compelling responses based on the context, it could cause people to assume it is correct, when infact it is not. So, simply put, distribution of misinformation on a potentially large scale. | In situations where a model might make mistakes, and those mistakes could be harmful, what is a good alternative to automating a process? Having a human overseer. | What kind of tabular data is deep learning particularly good at? High cardinality (a lot of unique value) categorical columns, such as zip code or product ID. | What&#39;s a key downside of directly using a deep learning model for recommendation systems? The recommendation system is actually not very helpful and bias. For example, if you like the book Legend by Marie Lu (great book btw), it will suggest other books by the same author like Prodigy and Champion. Well, these are part of the same series so this is actually not very helpful. | What are the steps of the Drivetrain Approach? Define objective, Levers (Hyperparameters), Data collection, and Models | How do the steps of the Drivetrain Approach map to a recommendation system? Objective is to drive the sales. Levers is the ranking of the recommendations. Data is collected to generate recommendations that will cause new sales. | Create an image recognition model using data you curate, and deploy it on the web. | What is DataLoaders? A fastai class that stores multiple DataLoader objects you pass to it, and makes them available as train and valid. | What four things do we need to tell fastai to create DataLoaders? Type of data How to get data How to get Labels How to create validation set | What does the splitter parameter to DataBlock do? Splits data into subsets of train and validation set. | How do we ensure a random split always gives the same validation set? Define a seed. | What letters are often used to signify the independent and dependent variables? x is the independent, while y is the dependent. | What&#39;s the difference between the crop, pad, and squish resize approaches? When might you choose one over the others? Crop cuts part of the image to the assigned size. Pad adds 0 pixels to the sides of the image. Squish either squishes or stretches the image.&lt;/br&gt; Choosing the right one depends on the data and problem. | What is data augmentation? Why is it needed? Data augmentation creates variation of the input data. This makes the model more robust (generalizable) and creates a larger dataset if the dataset is small. | What is the difference between item_tfms and batch_tfms? item_tfms are transformations applied to a single data sample. batch_tfms are applied to batched data samples. | What is a confusion matrix? A representation of the predictions vs the labels. Looks like an identity matrix. | What does export save? The model we trained. | What is it called when we use a model for getting predictions, instead of training? Inference | What are IPython widgets? IPython widgets is a mix of JavaScript and Python functionalities that let us build and interact with GUI components within Jupyter notebooks. For example, the uploader button seen above. | When might you want to use CPU for deployment? When might GPU be better? CPU is good/cost effective when analyzing single pieces of data at a time. GPUs are best for doing work in parallel or in batches at a time. | What are the downsides of deploying your app to a server, instead of to a client (or edge) device such as a phone or PC? Network connection could cause latency problems. | What are three examples of problems that could occur when rolling out a bear warning system in practice? Blurry/low resolution images Bears at night (Night images) Bears are obstructed by trees | What is &quot;out-of-domain data&quot;? Data that was not present within models training input. | What is &quot;domain shift&quot;? Type of data changes gradually over time. | What are the three steps in the deployment process? https://raw.githubusercontent.com/fastai/fastbook/780b76bef3127ce5b64f8230fce60e915a7e0735/images/att_00061.png | Further Research . Consider how the Drivetrain Approach maps to a project or problem you&#39;re interested in. | When might it be best to avoid certain types of data augmentation? For example, if the features in the images take up the whole image, then cropping may result in loss of information: Here, squishing or padding may be more useful. | For a project you&#39;re interested in applying deep learning to, consider the thought experiment &quot;What would happen if it went really, really well?&quot; | Start a blog, and write your first blog post. For instance, write about what you think deep learning might be useful for in a domain you&#39;re interested in. https://usama280.github.io/PasteBlogs/ |",
            "url": "https://usama280.github.io/PasteBlogs/2021/07/09/Lesson2-production-(1).html",
            "relUrl": "/2021/07/09/Lesson2-production-(1).html",
            "date": " • Jul 9, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Bear Classifier",
            "content": "Upload a image of a bear and have my model classify it for you! . Note: Can only classify Teddy, Black, and Grizzly bears. . from fastai.vision.all import * from fastai.vision.widgets import * path = Path() learn_inf = load_learner(path/&#39;export.pkl&#39;) . Creating widgets . btn_upload = widgets.FileUpload() out_pl = widgets.Output() lbl_pred = widgets.Label() btn_run = widgets.Button(description=&#39;Classify&#39;) . Method for what to do on click . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; . btn_run.on_click(on_click_classify) . VBox used to put all widgets togather . VBox([widgets.Label(&#39;Select your bear!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) .",
            "url": "https://usama280.github.io/PasteBlogs/2021/07/09/Bear-classifier.html",
            "relUrl": "/2021/07/09/Bear-classifier.html",
            "date": " • Jul 9, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Lesson 4 - FastAI",
            "content": "Learning the basics of classification . path = untar_data(URLs.MNIST_SAMPLE) #path for data . path.ls() . (#3) [Path(&#39;train&#39;),Path(&#39;labels.csv&#39;),Path(&#39;valid&#39;)] . (path/&#39;train&#39;).ls() . (#2) [Path(&#39;train/3&#39;),Path(&#39;train/7&#39;)] . threes = (path/&#39;train&#39;/&#39;3&#39;).ls().sorted() #getting 3&#39;s data from path sevens = (path/&#39;train&#39;/&#39;7&#39;).ls().sorted() #getting 7&#39;s data from path threes . (#6131) [Path(&#39;train/3/10.png&#39;),Path(&#39;train/3/10000.png&#39;),Path(&#39;train/3/10011.png&#39;),Path(&#39;train/3/10031.png&#39;),Path(&#39;train/3/10034.png&#39;),Path(&#39;train/3/10042.png&#39;),Path(&#39;train/3/10052.png&#39;),Path(&#39;train/3/1007.png&#39;),Path(&#39;train/3/10074.png&#39;),Path(&#39;train/3/10091.png&#39;)...] . im3_path = threes[1] im3 = Image.open(im3_path) #shows image im3 . array(im3)[4:10,4:10] #numpy to convert image into quantitative rep . array([[ 0, 0, 0, 0, 0, 0], [ 0, 0, 0, 0, 0, 29], [ 0, 0, 0, 48, 166, 224], [ 0, 93, 244, 249, 253, 187], [ 0, 107, 253, 253, 230, 48], [ 0, 3, 20, 20, 15, 0]], dtype=uint8) . tensor(im3)[4:10,4:10] #same thing as numpy array but work better on GPU&#39;s (preferred) . tensor([[ 0, 0, 0, 0, 0, 0], [ 0, 0, 0, 0, 0, 29], [ 0, 0, 0, 48, 166, 224], [ 0, 93, 244, 249, 253, 187], [ 0, 107, 253, 253, 230, 48], [ 0, 3, 20, 20, 15, 0]], dtype=torch.uint8) . im3.shape . (28, 28) . im3_t = tensor(im3) df = pd.DataFrame(im3_t[4:15,4:22]) df.style.set_properties(**{&#39;font-size&#39;:&#39;6pt&#39;}).background_gradient(&#39;Greys&#39;) #Using panda&#39;s framework . 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 . 0 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 0 | 0 | 0 | 0 | 0 | 29 | 150 | 195 | 254 | 255 | 254 | 176 | 193 | 150 | 96 | 0 | 0 | 0 | . 2 0 | 0 | 0 | 48 | 166 | 224 | 253 | 253 | 234 | 196 | 253 | 253 | 253 | 253 | 233 | 0 | 0 | 0 | . 3 0 | 93 | 244 | 249 | 253 | 187 | 46 | 10 | 8 | 4 | 10 | 194 | 253 | 253 | 233 | 0 | 0 | 0 | . 4 0 | 107 | 253 | 253 | 230 | 48 | 0 | 0 | 0 | 0 | 0 | 192 | 253 | 253 | 156 | 0 | 0 | 0 | . 5 0 | 3 | 20 | 20 | 15 | 0 | 0 | 0 | 0 | 0 | 43 | 224 | 253 | 245 | 74 | 0 | 0 | 0 | . 6 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 249 | 253 | 245 | 126 | 0 | 0 | 0 | 0 | . 7 0 | 0 | 0 | 0 | 0 | 0 | 0 | 14 | 101 | 223 | 253 | 248 | 124 | 0 | 0 | 0 | 0 | 0 | . 8 0 | 0 | 0 | 0 | 0 | 11 | 166 | 239 | 253 | 253 | 253 | 187 | 30 | 0 | 0 | 0 | 0 | 0 | . 9 0 | 0 | 0 | 0 | 0 | 16 | 248 | 250 | 253 | 253 | 253 | 253 | 232 | 213 | 111 | 2 | 0 | 0 | . 10 0 | 0 | 0 | 0 | 0 | 0 | 0 | 43 | 98 | 98 | 208 | 253 | 253 | 253 | 253 | 187 | 22 | 0 | . First Try: Pixel Similarity . seven_tensors = [tensor(Image.open(o)) for o in sevens] three_tensors = [tensor(Image.open(o)) for o in threes] len(three_tensors), len(seven_tensors) . (6131, 6265) . show_image(three_tensors[1]); . type(three_tensors) . list . stacked_sevens = torch.stack(seven_tensors).float()/255 stacked_threes = torch.stack(three_tensors).float()/255 stacked_threes.shape . torch.Size([6131, 28, 28]) . len(stacked_threes.shape) #Returns rank. Rank means it has n dementions . 3 . stacked_threes.ndim . 3 . mean3 = stacked_threes.mean() #notice taking mean gives a number mean3 . tensor(0.1415) . mean3 = stacked_threes.mean(0) #the 0 represents the axis we are doing the mean across (In this case across the first axis 6131) show_image(mean3); . mean7 = stacked_sevens.mean(0) show_image(mean7); . a_3 = stacked_threes[1] show_image(a_3); . dist_3_abs = (a_3 - mean3).abs().mean() #L1 norm dist_3_sqr = ((a_3 - mean3)**2).mean().sqrt() #RMSE or L2 norm dist_3_abs,dist_3_sqr . (tensor(0.1114), tensor(0.2021)) . dist_7_abs = (a_3 - mean7).abs().mean() dist_7_sqr = ((a_3 - mean7)**2).mean().sqrt() dist_7_abs,dist_7_sqr . (tensor(0.1586), tensor(0.3021)) . F.l1_loss(a_3.float(),mean7), F.mse_loss(a_3,mean7).sqrt() . (tensor(0.1586), tensor(0.3021)) . NumPy Arrays and PyTorch Tensors . Just some comparison between tensors and numpy arrays . data = [[1,2,3],[4,5,6]] arr = array (data) tns = tensor(data) . arr # numpy . array([[1, 2, 3], [4, 5, 6]]) . tns # pytorch . tensor([[1, 2, 3], [4, 5, 6]]) . tns[1] . tensor([4, 5, 6]) . tns[:,1] . tensor([2, 5]) . tns[1,1:3] . tensor([5, 6]) . tns+1 . tensor([[2, 3, 4], [5, 6, 7]]) . tns.type() . &#39;torch.LongTensor&#39; . tns*1.5 . tensor([[1.5000, 3.0000, 4.5000], [6.0000, 7.5000, 9.0000]]) . Computing Metrics Using Broadcasting . valid_3_tens = torch.stack([tensor(Image.open(o)) for o in (path/&#39;valid&#39;/&#39;3&#39;).ls()]) valid_3_tens = valid_3_tens.float()/255 valid_7_tens = torch.stack([tensor(Image.open(o)) for o in (path/&#39;valid&#39;/&#39;7&#39;).ls()]) valid_7_tens = valid_7_tens.float()/255 valid_3_tens.shape, valid_7_tens.shape . (torch.Size([1010, 28, 28]), torch.Size([1028, 28, 28])) . def mnist_distance(a,b): return (a-b).abs().mean((-1,-2)) #mean across 2nd and last axis (28,28) mnist_distance(a_3, mean3) . tensor(0.1114) . valid_3_dist = mnist_distance(valid_3_tens, mean3) #broadcast method across entire validation set valid_3_dist, valid_3_dist.shape . (tensor([0.1787, 0.1422, 0.1412, ..., 0.1358, 0.1301, 0.1110]), torch.Size([1010])) . tensor([1,2,3]) + tensor([1]) #broadcasting example . tensor([2, 3, 4]) . (valid_3_tens-mean3).shape . torch.Size([1010, 28, 28]) . def is_3(x): return mnist_distance(x,mean3) &lt; mnist_distance(x,mean7) . is_3(a_3), is_3(a_3).float() . (tensor(True), tensor(1.)) . a_7 = stacked_sevens[1] a_7 . show_image(a_7) . &lt;AxesSubplot:&gt; . is_3(a_7), is_3(a_7).float() #tensor val is 0 . (tensor(False), tensor(0.)) . is_3(valid_3_tens) . tensor([True, True, True, ..., True, True, True]) . accuracy_3s = is_3(valid_3_tens).float() .mean() accuracy_7s = (1 - is_3(valid_7_tens).float()).mean() accuracy_3s,accuracy_7s,(accuracy_3s+accuracy_7s)/2 . (tensor(0.9168), tensor(0.9854), tensor(0.9511)) . I will test this simple model below with my input image I drew in paint . uploader = widgets.FileUpload() uploader . img = PILImage.create(uploader.data[0]) img.to_thumb(40) . img = img.resize((28,28)) #Resizing img . t_3 = tensor(img) #converting to tensor . . t_3.shape . torch.Size([28, 28, 3]) . t_3 = t_3[:,:,0] #dropping channels . show_image(t_3) . &lt;AxesSubplot:&gt; . t_3.shape . torch.Size([28, 28]) . is_3(t_3) #Nice, it got it right! . tensor(True) . Stochastic Gradient Descent (SGD) . def f(x): return x**2 . plot_function(f, &#39;x&#39;, &#39;x**2&#39;) . /opt/conda/envs/fastai/lib/python3.8/site-packages/fastbook/__init__.py:73: UserWarning: Not providing a value for linspace&#39;s steps is deprecated and will throw a runtime error in a future release. This warning will appear only once per process. (Triggered internally at /opt/conda/conda-bld/pytorch_1603729096996/work/aten/src/ATen/native/RangeFactories.cpp:23.) x = torch.linspace(min,max) . plot_function(f, &#39;x&#39;, &#39;x**2&#39;) plt.scatter(-1.5, f(-1.5), color=&#39;red&#39;); . Calculating Gradients . xt = tensor(3.).requires_grad_() #The method requires_grade_ tells pyTorch that it must keep track of all comput. so we can calc grad on them later . yt = f(xt) yt . tensor(9., grad_fn=&lt;PowBackward0&gt;) . yt.backward() #backprop . xt.grad #Slope at pos 3 . tensor(6.) . xt = tensor([3.,4.,10.]).requires_grad_() xt . tensor([ 3., 4., 10.], requires_grad=True) . def f(x): return (x**2).sum() yt = f(xt) yt . tensor(125., grad_fn=&lt;SumBackward0&gt;) . yt.backward() xt.grad . tensor([ 6., 8., 20.]) . Stepping With a Learning Rate . An End-to-End SGD Example . time = torch.arange(0,20).float(); time . tensor([ 0., 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19.]) . speed = torch.randn(20)*3 + 0.75*(time-9.5)**2 + 1 plt.scatter(time,speed); . def f(t, params): a,b,c = params return a*(t**2) + (b*t) + c . def mse(preds, targets): return ((preds-targets)**2).mean().sqrt() #mean squared error . Step 1: Initialize the parameters . params = torch.randn(3).requires_grad_() #Getting random weights params . tensor([0.2815, 0.0562, 0.5227], requires_grad=True) . Step 2: Calculate the predictions . preds = f(time, params) . def show_preds(preds, ax=None): if ax is None: ax=plt.subplots()[1] ax.scatter(time, speed) ax.scatter(time, to_np(preds), color=&#39;red&#39;) ax.set_ylim(-300,100) . show_preds(preds) #Red is our predictions, Blue is the labels . Step 3: Calculate the loss . loss = mse(preds, speed) #Current loss loss . tensor(35.6327, grad_fn=&lt;SqrtBackward&gt;) . Step 4: Calculate the gradients . loss.backward() params.grad . tensor([121.4830, 7.8875, 0.3013]) . params.grad * 1e-5 #1e-5 is the learning rate . tensor([1.2148e-03, 7.8875e-05, 3.0131e-06]) . Step 5: Step the weights. . print(params.data) #.data is used so gradient is NOT calc print(params) . tensor([0.2815, 0.0562, 0.5227]) tensor([0.2815, 0.0562, 0.5227], requires_grad=True) . lr = 1e-4 params.data -= lr * params.grad.data params.grad = None . preds = f(time,params) mse(preds, speed) #loss improved . tensor(34.1798, grad_fn=&lt;SqrtBackward&gt;) . show_preds(preds) . Putting all of the above into a simple function . def apply_step(params, prn=True): preds = f(time, params) loss = mse(preds, speed) loss.backward() params.data -= lr * params.grad.data params.grad = None if prn: print(loss.item()) return preds . Step 6: Repeat the process . for i in range(10): apply_step(params) #running it 10 times (Notice loss improving) . 34.17982482910156 32.844730377197266 31.63145637512207 30.54193687438965 29.575712203979492 28.729764938354492 27.998600006103516 27.374542236328125 26.84825325012207 26.409330368041992 . _,axs = plt.subplots(1,4,figsize=(12,3)) for ax in axs: show_preds(apply_step(params, False), ax) plt.tight_layout() . Step 7: stop . The MNIST Loss Function . train_x = torch.cat([stacked_threes, stacked_sevens]).view(-1, 28*28) #.view reshapes the image where each row has 1 image # with all its content in a single row (each image is 28x28) . train_y = tensor([1]*len(threes) + [0]*len(sevens)).unsqueeze(1) train_x.shape,train_y.shape . (torch.Size([12396, 784]), torch.Size([12396, 1])) . dset = list(zip(train_x,train_y)) #zip() creates a concatination of x,y x,y = dset[0] x.shape,y . (torch.Size([784]), tensor([1])) . valid_x = torch.cat([valid_3_tens, valid_7_tens]).view(-1, 28*28) valid_y = tensor([1]*len(valid_3_tens) + [0]*len(valid_7_tens)).unsqueeze(1) valid_dset = list(zip(valid_x,valid_y)) . def init_params(size, var=1.0): return (torch.randn(size)*var).requires_grad_() . weights = init_params((28*28,1)) #weights needed for every pixel, hence 28*28 . bias = init_params(1) #Need bias because w*p = 0 when p=0 (p = pixel) . (train_x[0]*weights.T).sum() + bias #Must transpose so multi can happen . tensor([21.8052], grad_fn=&lt;AddBackward0&gt;) . def linear1(xb): return xb@weights + bias #@ repersents matrix multi preds = linear1(train_x) preds #preds of all images . tensor([[21.8052], [11.4321], [19.5403], ..., [ 6.7101], [ 7.7558], [ 0.4296]], grad_fn=&lt;AddBackward0&gt;) . Lets assume everything greater 0 is correctly labeled . corrects = (preds&gt;0.0).float() == train_y corrects . tensor([[ True], [ True], [ True], ..., [False], [False], [False]]) . corrects.float().mean().item() #Displays accuracy . 0.49951598048210144 . Now lets see how the accuracy changes for a small change in the weights . weights[0] *= 1.0001 . Notice that the accuracy did not change - This is why we make use of a loss function . preds = linear1(train_x) ((preds&gt;0.0).float() == train_y).float().mean().item() . 0.49951598048210144 . Example showcasing the effects of loss . trgts = tensor([1,0,1]) prds = tensor([0.9, 0.4, 0.2]) . def mnist_loss(predictions, targets): #Where not 1 #Where 1 return torch.where(targets==1, 1-predictions, predictions).mean() . torch.where(trgts==1, 1-prds, prds) . tensor([0.1000, 0.4000, 0.8000]) . mnist_loss(prds,trgts) . tensor(0.4333) . mnist_loss(tensor([0.9, 0.4, 0.8]),trgts) #What happens when we change the last pred (loss gets better) . tensor(0.2333) . Sigmoid . def sigmoid(x): return 1/(1+torch.exp(-x)) . plot_function(torch.sigmoid, title=&#39;Sigmoid&#39;, min=-4, max=4) . def mnist_loss(predictions, targets): predictions = predictions.sigmoid() #squishing predictions between 0-1 return torch.where(targets==1, 1-predictions, predictions).mean() . SGD and Mini-Batches . coll = range(15) dl = DataLoader(coll, batch_size=5, shuffle=True) #creates minibatches list(dl) . [tensor([ 3, 12, 8, 10, 2]), tensor([ 9, 4, 7, 14, 5]), tensor([ 1, 13, 0, 6, 11])] . ds = L(enumerate(string.ascii_lowercase)) ds . (#26) [(0, &#39;a&#39;),(1, &#39;b&#39;),(2, &#39;c&#39;),(3, &#39;d&#39;),(4, &#39;e&#39;),(5, &#39;f&#39;),(6, &#39;g&#39;),(7, &#39;h&#39;),(8, &#39;i&#39;),(9, &#39;j&#39;)...] . dl = DataLoader(ds, batch_size=6, shuffle=True) #Works with tuples as well list(dl) . [(tensor([17, 18, 10, 22, 8, 14]), (&#39;r&#39;, &#39;s&#39;, &#39;k&#39;, &#39;w&#39;, &#39;i&#39;, &#39;o&#39;)), (tensor([20, 15, 9, 13, 21, 12]), (&#39;u&#39;, &#39;p&#39;, &#39;j&#39;, &#39;n&#39;, &#39;v&#39;, &#39;m&#39;)), (tensor([ 7, 25, 6, 5, 11, 23]), (&#39;h&#39;, &#39;z&#39;, &#39;g&#39;, &#39;f&#39;, &#39;l&#39;, &#39;x&#39;)), (tensor([ 1, 3, 0, 24, 19, 16]), (&#39;b&#39;, &#39;d&#39;, &#39;a&#39;, &#39;y&#39;, &#39;t&#39;, &#39;q&#39;)), (tensor([2, 4]), (&#39;c&#39;, &#39;e&#39;))] . Putting It All Together . weights = init_params((28*28,1)) bias = init_params(1) . dl = DataLoader(dset, batch_size=256) #create minibatches #We can grab the first batch and take a look at it xb,yb = first(dl) xb.shape,yb.shape . (torch.Size([256, 784]), torch.Size([256, 1])) . valid_dl = DataLoader(valid_dset, batch_size=256) #Create minibatch for validation set . Creating and testing with our own batch first . batch = train_x[:4] batch.shape . torch.Size([4, 784]) . linear1?? . preds = linear1(batch) preds . tensor([[10.1946], [ 3.4763], [12.7263], [ 7.4847]], grad_fn=&lt;AddBackward0&gt;) . loss = mnist_loss(preds, train_y[:4]) loss . tensor(0.0076, grad_fn=&lt;MeanBackward0&gt;) . mnist_loss?? . loss.backward() weights.grad.shape, weights.grad.mean(), bias.grad . (torch.Size([784, 1]), tensor(-0.0011), tensor([-0.0074])) . Put the above into a single func . def calc_grad(xb, yb, model): preds = model(xb) loss = mnist_loss(preds, yb) loss.backward() . calc_grad(batch, train_y[:4], linear1) weights.grad.mean(),bias.grad . (tensor(-7.1430e-05), tensor([-0.0005])) . calc_grad(batch, train_y[:4], linear1) weights.grad.mean(),bias.grad . (tensor(-0.0001), tensor([-0.0008])) . weights.grad.zero_() bias.grad.zero_(); . How to do an epoch . def train_epoch(model, lr, params): for xb,yb in dl: #get x and y batch calc_grad(xb, yb, model) #Calc grad for p in params: p.data -= p.grad*lr #Update/take a step p.grad.zero_() #Set grad to zero . (preds&gt;0.0).float() == train_y[:4] . tensor([[True], [True], [True], [True]]) . def batch_accuracy(xb, yb): preds = xb.sigmoid() correct = (preds&gt;0.5).float() == yb #.5 because sigmoid(0) = .5 return correct.float().mean() . batch_accuracy(linear1(batch), train_y[:4]) . tensor(1.) . def validate_epoch(model): accs = [batch_accuracy(model(xb), yb) for xb,yb in valid_dl] return round(torch.stack(accs).mean().item(), 4) . validate_epoch(linear1) . 0.4607 . lr = 1. params = weights,bias train_epoch(linear1, lr, params) validate_epoch(linear1) . 0.637 . for i in range(20): train_epoch(linear1, lr, params) print(validate_epoch(linear1)) . 0.791 0.8925 0.9315 0.9476 0.9515 0.9579 0.9637 0.9652 0.9667 0.9672 0.9677 0.9701 0.9706 0.9711 0.9725 0.9735 0.9735 0.974 0.974 0.9745 . Creating an Optimizer - Basically optimizing the above stuff we did . linear_model = nn.Linear(28*28,1) #Does exactly what out funtion linear1 does and initialzes our parameters for us . w,b = linear_model.parameters() w.shape,b.shape . (torch.Size([1, 784]), torch.Size([1])) . class BasicOptim: def __init__(self,params,lr): self.params = list(params) self.lr = lr def step(self, *args, **kwargs): for p in self.params: p.data -= p.grad.data * self.lr def zero_grad(self, *args, **kwargs): for p in self.params: p.grad = None . opt = BasicOptim(linear_model.parameters(), lr) . def train_epoch(model): for xb,yb in dl: calc_grad(xb, yb, model) opt.step() opt.zero_grad() . validate_epoch(linear_model) . 0.3794 . def train_model(model, epochs): for i in range(epochs): train_epoch(model) print(validate_epoch(model), end=&#39; &#39;) . train_model(linear_model, 20) . 0.4932 0.7476 0.8511 0.9155 0.9346 0.9482 0.9555 0.9629 0.9658 0.9673 0.9707 0.9722 0.9736 0.9751 0.9761 0.9766 0.9775 0.9775 0.9785 0.9785 . Can further optimize by using fastai . linear_model = nn.Linear(28*28,1) opt = SGD(linear_model.parameters(), lr) train_model(linear_model, 20) . 0.4932 0.7393 0.8613 0.9175 0.9365 0.9497 0.957 0.9634 0.9663 0.9673 0.9702 0.9727 0.9736 0.9751 0.9761 0.9766 0.9775 0.978 0.978 0.979 . Finally the most simplest way . dls = DataLoaders(dl, valid_dl) #NOT dataLoader, this class stores away the train and valid data into a single obj . learn = Learner(dls, nn.Linear(28*28,1), opt_func=SGD, loss_func=mnist_loss, metrics=batch_accuracy) . learn.fit(10, lr=lr) . epoch train_loss valid_loss batch_accuracy time . 0 | 0.636365 | 0.503465 | 0.495584 | 00:00 | . 1 | 0.521433 | 0.170448 | 0.864082 | 00:00 | . 2 | 0.191138 | 0.189521 | 0.824828 | 00:00 | . 3 | 0.083866 | 0.109406 | 0.910697 | 00:00 | . 4 | 0.044337 | 0.079229 | 0.932777 | 00:00 | . 5 | 0.028900 | 0.063259 | 0.947007 | 00:00 | . 6 | 0.022547 | 0.053348 | 0.954367 | 00:00 | . 7 | 0.019723 | 0.046764 | 0.961727 | 00:00 | . 8 | 0.018294 | 0.042152 | 0.965653 | 00:00 | . 9 | 0.017439 | 0.038766 | 0.967615 | 00:00 | . Adding a Nonlinearity . def simple_net(xb): res = xb@w1 + b1 #Linear func res = res.max(tensor(0.0)) #Activation func: ReLU res = res@w2 + b2 #Linear func return res . w1 = init_params((28*28,30)) b1 = init_params(30) w2 = init_params((30,1)) b2 = init_params(1) . plot_function(F.relu) . simple_net = nn.Sequential( nn.Linear(28*28,30), #30 sets of weights nn.ReLU(), nn.Linear(30,1) #convert back into 1 set of weights ) . learn = Learner(dls, simple_net, opt_func=SGD, loss_func=mnist_loss, metrics=batch_accuracy) . learn.fit(40, 0.1) . epoch train_loss valid_loss batch_accuracy time . 0 | 0.324376 | 0.404988 | 0.505888 | 00:00 | . 1 | 0.150483 | 0.233413 | 0.803238 | 00:00 | . 2 | 0.083043 | 0.117188 | 0.912169 | 00:00 | . 3 | 0.054295 | 0.078788 | 0.940628 | 00:00 | . 4 | 0.040957 | 0.061365 | 0.956330 | 00:00 | . 5 | 0.034142 | 0.051610 | 0.962709 | 00:00 | . 6 | 0.030232 | 0.045451 | 0.965653 | 00:00 | . 7 | 0.027697 | 0.041252 | 0.967125 | 00:00 | . 8 | 0.025878 | 0.038205 | 0.968106 | 00:00 | . 9 | 0.024475 | 0.035891 | 0.970069 | 00:00 | . 10 | 0.023342 | 0.034062 | 0.972522 | 00:00 | . 11 | 0.022400 | 0.032572 | 0.973013 | 00:00 | . 12 | 0.021602 | 0.031321 | 0.973994 | 00:00 | . 13 | 0.020913 | 0.030250 | 0.973994 | 00:00 | . 14 | 0.020312 | 0.029316 | 0.974975 | 00:00 | . 15 | 0.019781 | 0.028492 | 0.976448 | 00:00 | . 16 | 0.019307 | 0.027757 | 0.977920 | 00:00 | . 17 | 0.018882 | 0.027094 | 0.978901 | 00:00 | . 18 | 0.018496 | 0.026495 | 0.978901 | 00:00 | . 19 | 0.018143 | 0.025950 | 0.979392 | 00:00 | . 20 | 0.017820 | 0.025452 | 0.979392 | 00:00 | . 21 | 0.017520 | 0.024996 | 0.979392 | 00:00 | . 22 | 0.017242 | 0.024576 | 0.979882 | 00:00 | . 23 | 0.016983 | 0.024189 | 0.980864 | 00:00 | . 24 | 0.016740 | 0.023832 | 0.981354 | 00:00 | . 25 | 0.016511 | 0.023501 | 0.981354 | 00:00 | . 26 | 0.016295 | 0.023195 | 0.981354 | 00:00 | . 27 | 0.016090 | 0.022910 | 0.981354 | 00:00 | . 28 | 0.015896 | 0.022645 | 0.982826 | 00:00 | . 29 | 0.015711 | 0.022398 | 0.982826 | 00:00 | . 30 | 0.015535 | 0.022167 | 0.982336 | 00:00 | . 31 | 0.015367 | 0.021952 | 0.982826 | 00:00 | . 32 | 0.015206 | 0.021750 | 0.982826 | 00:00 | . 33 | 0.015052 | 0.021560 | 0.982826 | 00:00 | . 34 | 0.014904 | 0.021382 | 0.982826 | 00:00 | . 35 | 0.014762 | 0.021215 | 0.982826 | 00:00 | . 36 | 0.014625 | 0.021057 | 0.982826 | 00:00 | . 37 | 0.014494 | 0.020908 | 0.982826 | 00:00 | . 38 | 0.014367 | 0.020767 | 0.982826 | 00:00 | . 39 | 0.014245 | 0.020634 | 0.982826 | 00:00 | . plt.plot(L(learn.recorder.values).itemgot(2)); . learn.recorder.values[-1][2] . 0.982826292514801 . m = learn.model m . Sequential( (0): Linear(in_features=784, out_features=30, bias=True) (1): ReLU() (2): Linear(in_features=30, out_features=1, bias=True) ) . w, b = m[0].parameters() . w.shape . torch.Size([30, 784]) . . show_image(w[2].view(28,28)) . &lt;AxesSubplot:&gt; . Going Deeper - Using FastAI&#39;s model resnet18 . dls = ImageDataLoaders.from_folder(path) learn = cnn_learner(dls, resnet18, pretrained=False, loss_func=F.cross_entropy, metrics=accuracy) learn.fit_one_cycle(1, 0.1) #Thats insane . epoch train_loss valid_loss accuracy time . 0 | 0.132423 | 0.036220 | 0.995093 | 00:17 | . Questionnaire . How is a grayscale image represented on a computer? How about a color image? Image on the computer are represented by a number value, where 0=white, 255=black, and the grayscale inbetween. A grayscale image is rank 2 (No color channels) A color image is rank 3 (Has the 3 color channels, RGB) | How are the files and folders in the MNIST_SAMPLE dataset structured? Why? Files are split into train, valid, labels. This makes it easier as the training and validation set have already been presplit for for. | Explain how the &quot;pixel similarity&quot; approach to classifying digits works. This is similer to the Nearest neighbors approach, where one compare each test image with all training images. Only here, the image being compared to is an average of all the training images. Then using a distance metric we can find the abs difference between the images to identify it. | What is a list comprehension? Create one now that selects odd numbers from a list and doubles them. A python condensing technique used with for-loop. | l = [i for i in range(20)] oddList = [i**2 for i in l if i%2 != 0] . What is a &quot;rank-3 tensor&quot;? A 3 dimensional tensor (Also known as a volumn). | What is the difference between tensor rank and shape? How do you get the rank from the shape? Rank refers to the number of dimensions in a tensor Shape is the size of each dimension of a tensor . Taking the len(shape) = rank . | What are RMSE and L1 norm? Loss functions | How can you apply a calculation on thousands of numbers at once, many thousands of times faster than a Python loop? Broadcasting | Create a 3×3 tensor or array containing the numbers from 1 to 9. Double it. Select the bottom-right four numbers. t = tensor(list(range(1,10))).view(3,3) t[1:,0:2] . | What is broadcasting? A technique of applying an operation onto all values within an object, often, regardless of tensor (Exceptions do apply). | Are metrics generally calculated using the training set, or the validation set? Why? Validation set as it contains unseen data. | What is SGD? Optimization algorithm. This is what causes the loss to decrease as it steps/updates the parameters. | Why does SGD use mini-batches? Minibatches are faster and more efficient on GPU. Also, they gradient is calculated more appropriately as doing it across the entire batch could cause unstable and imprecise gradients. | What are the seven steps in SGD for machine learning? Initialize parameters Compute perdiction Get loss Get gradients Update wieghts Repeat Stop | How do we initialize the weights in a model? Randomly | What is &quot;loss&quot;? A metric used by the computer to determine its performance | Why can&#39;t we always use a high learning rate? Stepping to far can cause the model to increase loss or bounce and diverge | What is a &quot;gradient&quot;? Slope. This tell us how much we have to change each weight to make our model better. | Do you need to know how to calculate gradients yourself? No | Why can&#39;t we use accuracy as a loss function? A loss function needs to change as the weights are being adjusted. Accuracy only changes if the predictions of the model changes. | Draw the sigmoid function. What is special about its shape? Squishes all values between 0-1 | What is the difference between a loss function and a metric? The loss function is understood by the computer, while a metric is understood by us humans. | What is the function to calculate new weights using a learning rate? The optimizer step function (Ex: SGD). | What does the DataLoader class do? Creates minibatches | Write pseudocode showing the basic steps taken in each epoch for SGD. . for x,y in data: pred = model(x) loss = loss_func(pred, y) loss.backward() for p in self.params: p -= parameters.grad * lr p.grad = None . | Create a function that, if passed two arguments [1,2,3,4] and &#39;abcd&#39;, returns [(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;), (4, &#39;d&#39;)]. What is special about that output data structure? def func(l1,l2): return list(zip(l1,l2)) . | What does view do in PyTorch? Reshapes tensor | What are the &quot;bias&quot; parameters in a neural network? Why do we need them? So that the gradient isnt set to 0 during the first iteration. | What does the @ operator do in Python? Matrix multi | What does the backward method do? Calculated gradients | Why do we have to zero the gradients? PyTorch remembers the previously stored gradients | What information do we have to pass to Learner? dataset (DataLoaders), model (Ex: nn.Linear), opt func (Ex: SGD), loss func (Ex: mnist_loss), metric(Optional) | Show Python or pseudocode for the basic steps of a training loop. . def train_epoch(model,lr,params): for x,y in dl: calc_grad(x,y,model) for p in self.params: p -= parameters.grad * lr p.grad = None for i in range(epochs): train_epoch(model, lr, params) . | What is &quot;ReLU&quot;? Draw a plot of it for values from -2 to +2. Activation function . | What is an &quot;activation function&quot;? The purpose of an activation function is to add non-linearity to the model. | What&#39;s the difference between F.relu and nn.ReLU? F.relu is a Python function nn.ReLU is a PyTorch module (So part of a class) | The universal approximation theorem shows that any function can be approximated as closely as needed using just one nonlinearity. So why do we normally use more? There are performance benefits to using more than one nonlinearity | Further Research . Create your own implementation of Learner from scratch, based on the training loop shown in this chapter. | Complete all the steps in this chapter using the full MNIST datasets (that is, for all digits, not just 3s and 7s). This is a significant project and will take you quite a bit of time to complete! You&#39;ll need to do some of your own research to figure out how to overcome some obstacles you&#39;ll meet on the way. Completed. See https://usama280.github.io/PasteBlogs/ |",
            "url": "https://usama280.github.io/PasteBlogs/2021/07/07/Lesson4-mnist_basics.html",
            "relUrl": "/2021/07/07/Lesson4-mnist_basics.html",
            "date": " • Jul 7, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Lesson 1 - FastAI",
            "content": "Your First Model . from fastai.vision.all import * #IMPORT path = untar_data(URLs.PETS)/&#39;images&#39; #DATA SET def is_cat(x): return x[0].isupper() #Labels for the dataset (This dataset cat labels begin w/ uppercase letter) #Create dataset (Training data, test data) and correctly gets imgs w/ labels dls = ImageDataLoaders.from_name_func( path, get_image_files(path), valid_pct=0.2, seed=42, label_func=is_cat, item_tfms=Resize(224)) learn = cnn_learner(dls, resnet34, metrics=error_rate) #Creating architecture learn.fine_tune(1) #Training . Sidebar: This Book Was Written in Jupyter Notebooks . img = PILImage.create(image_cat()) img.to_thumb(192) . End sidebar . uploader = widgets.FileUpload() uploader . img = PILImage.create(uploader.data[0]) img.to_thumb(192) . is_cat,_,probs = learn.predict(img) print(f&quot;Is this a cat?: {is_cat}.&quot;) print(f&quot;Probability it&#39;s a cat: {probs[1].item():.6f}&quot;) . Is this a cat?: True. Probability it&#39;s a cat: 0.999998 . Limitations Inherent To Machine Learning . From this picture we can now see some fundamental things about training a deep learning model: . A model cannot be created without data. | A model can only learn to operate on the patterns seen in the input data used to train it. | This learning approach only creates predictions, not recommended actions. | It&#39;s not enough to just have examples of input data; we need labels for that data too (e.g., pictures of dogs and cats aren&#39;t enough to train a model; we need a label for each one, saying which ones are dogs, and which are cats). | . Generally speaking, we&#39;ve seen that most organizations that say they don&#39;t have enough data, actually mean they don&#39;t have enough labeled data. If any organization is interested in doing something in practice with a model, then presumably they have some inputs they plan to run their model against. And presumably they&#39;ve been doing that some other way for a while (e.g., manually, or with some heuristic program), so they have data from those processes! For instance, a radiology practice will almost certainly have an archive of medical scans (since they need to be able to check how their patients are progressing over time), but those scans may not have structured labels containing a list of diagnoses or interventions (since radiologists generally create free-text natural language reports, not structured data). We&#39;ll be discussing labeling approaches a lot in this book, because it&#39;s such an important issue in practice. . Since these kinds of machine learning models can only make predictions (i.e., attempt to replicate labels), this can result in a significant gap between organizational goals and model capabilities. For instance, in this book you&#39;ll learn how to create a recommendation system that can predict what products a user might purchase. This is often used in e-commerce, such as to customize products shown on a home page by showing the highest-ranked items. But such a model is generally created by looking at a user and their buying history (inputs) and what they went on to buy or look at (labels), which means that the model is likely to tell you about products the user already has or already knows about, rather than new products that they are most likely to be interested in hearing about. That&#39;s very different to what, say, an expert at your local bookseller might do, where they ask questions to figure out your taste, and then tell you about authors or series that you&#39;ve never heard of before. . Deep Learning Is Not Just for Image Classification . The below is a segmentation model . path = untar_data(URLs.CAMVID_TINY) dls = SegmentationDataLoaders.from_label_func( #Segmentation path, bs=8, fnames = get_image_files(path/&quot;images&quot;), label_func = lambda o: path/&#39;labels&#39;/f&#39;{o.stem}_P{o.suffix}&#39;, codes = np.loadtxt(path/&#39;codes.txt&#39;, dtype=str) ) learn = unet_learner(dls, resnet34) learn.fine_tune(8) . epoch train_loss valid_loss time . 0 | 2.821857 | 3.201599 | 00:05 | . epoch train_loss valid_loss time . 0 | 2.189840 | 1.802189 | 00:04 | . 1 | 1.831589 | 1.741264 | 00:04 | . 2 | 1.633543 | 1.287880 | 00:04 | . 3 | 1.459935 | 1.189295 | 00:04 | . 4 | 1.315327 | 1.003694 | 00:04 | . 5 | 1.188064 | 0.926959 | 00:04 | . 6 | 1.080196 | 0.872466 | 00:04 | . 7 | 0.997371 | 0.871319 | 00:04 | . learn.show_results(max_n=2, figsize=(10,12)) . The below is a natural language model . from fastai.text.all import * dls = TextDataLoaders.from_folder(untar_data(URLs.IMDB), valid=&#39;test&#39;) learn = text_classifier_learner(dls, AWD_LSTM, drop_mult=0.5, metrics=accuracy) learn.fine_tune(2, 1e-2) . learn.predict(&quot;I really liked that movie!&quot;) . (&#39;pos&#39;, tensor(1), tensor([0.0228, 0.9772])) . The below is a salary prediction model . from fastai.tabular.all import * path = untar_data(URLs.ADULT_SAMPLE) dls = TabularDataLoaders.from_csv(path/&#39;adult.csv&#39;, path=path, y_names=&quot;salary&quot;, cat_names = [&#39;workclass&#39;, &#39;education&#39;, &#39;marital-status&#39;, &#39;occupation&#39;, &#39;relationship&#39;, &#39;race&#39;], cont_names = [&#39;age&#39;, &#39;fnlwgt&#39;, &#39;education-num&#39;], procs = [Categorify, FillMissing, Normalize]) learn = tabular_learner(dls, metrics=accuracy) . learn.fit_one_cycle(3) . epoch train_loss valid_loss accuracy time . 0 | 0.372949 | 0.361306 | 0.833077 | 00:05 | . 1 | 0.354939 | 0.348455 | 0.841830 | 00:05 | . 2 | 0.349614 | 0.347378 | 0.840756 | 00:05 | . The below is a reccomendation model . from fastai.collab import * path = untar_data(URLs.ML_SAMPLE) dls = CollabDataLoaders.from_csv(path/&#39;ratings.csv&#39;) learn = collab_learner(dls, y_range=(0.5,5.5)) learn.fine_tune(10) . epoch train_loss valid_loss time . 0 | 1.523757 | 1.424118 | 00:00 | . epoch train_loss valid_loss time . 0 | 1.376706 | 1.363828 | 00:00 | . 1 | 1.282471 | 1.173324 | 00:00 | . 2 | 1.034186 | 0.848724 | 00:00 | . 3 | 0.805283 | 0.694374 | 00:00 | . 4 | 0.709625 | 0.654900 | 00:00 | . 5 | 0.652975 | 0.645875 | 00:00 | . 6 | 0.634861 | 0.639299 | 00:00 | . 7 | 0.611313 | 0.637229 | 00:00 | . 8 | 0.617857 | 0.636715 | 00:00 | . 9 | 0.612095 | 0.636567 | 00:00 | . learn.show_results() . userId movieId rating rating_pred . 0 87.0 | 48.0 | 5.0 | 4.045295 | . 1 73.0 | 92.0 | 4.0 | 4.072179 | . 2 66.0 | 26.0 | 3.0 | 4.015839 | . 3 66.0 | 30.0 | 3.0 | 3.367572 | . 4 4.0 | 46.0 | 3.5 | 3.269851 | . 5 82.0 | 84.0 | 4.0 | 3.817361 | . 6 90.0 | 79.0 | 4.0 | 4.012848 | . 7 61.0 | 65.0 | 4.0 | 3.507185 | . 8 88.0 | 7.0 | 4.5 | 4.166433 | . Questionnaire . It can be hard to know in pages and pages of prose what the key things are that you really need to focus on and remember. So, we&#39;ve prepared a list of questions and suggested steps to complete at the end of each chapter. All the answers are in the text of the chapter, so if you&#39;re not sure about anything here, reread that part of the text and make sure you understand it. Answers to all these questions are also available on the book&#39;s website. You can also visit the forums if you get stuck to get help from other folks studying this material. . For more questions, including detailed answers and links to the video timeline, have a look at Radek Osmulski&#39;s aiquizzes. . Do you need these for deep learning? . Lots of math T / F | Lots of data T / F | Lots of expensive computers T / F | A PhD T / F | . | Name five areas where deep learning is now the best in the world. Vision, Natural language processing, Medicine, Robotics, and Games . | What was the name of the first device that was based on the principle of the artificial neuron? Mark I Perceptron | Based on the book of the same name, what are the requirements for parallel distributed processing (PDP)? Processing units, State of activation, Output function, Pattern of connectivity, Propagation rule, Activation rule, Learning rule, Environment | What were the two theoretical misunderstandings that held back the field of neural networks? Single layer network unable to learn simple mathimatical functions. More layers make network too big and slow to be useful. | What is a GPU? A graphics card is a processor that can handle 1000&#39;s of tasks at the same time. Particularly great for deep learning. | Open a notebook and execute a cell containing: 1+1. What happens? 2 | Follow through each cell of the stripped version of the notebook for this chapter. Before executing each cell, guess what will happen. | Complete the Jupyter Notebook online appendix. | Why is it hard to use a traditional computer program to recognize images in a photo? They are missing the weight assignment needed to recognize patterns within images to accomplish the task. | What did Samuel mean by &quot;weight assignment&quot;? The weight is another form of input that has direct influence on the model&#39;s performance. | What term do we normally use in deep learning for what Samuel called &quot;weights&quot;? Parameters | Draw a picture that summarizes Samuel&#39;s view of a machine learning model. . | Why is it hard to understand why a deep learning model makes a particular prediction? There are many layers, each with numerous neurons. Therefore, it gets complex really fast what each neuron is looking for when viewing an image, and how that impacts the perediction. . | What is the name of the theorem that shows that a neural network can solve any mathematical problem to any level of accuracy? Universal approximation theorem | What do you need in order to train a model? Data with labels | How could a feedback loop impact the rollout of a predictive policing model? The more the model is used the more biased the data becomes, and therefore, the more bias the model becomes. | Do we always have to use 224×224-pixel images with the cat recognition model? No. | What is the difference between classification and regression? Classification is about categorizing/labeling objects. Regression is about predicting numerical quantities, such as temp. | What is a validation set? What is a test set? Why do we need them? The validation set measures the accuracy of the model during training. The test set is used during the final evaluation to test the accuracy of the model. . We need both of them because the validation set could cause some bias in the model as we would are fitting the model towards it during training. However, the test set removes this and evaluates the model on unseen data, thereby, giving an accurate metric of accuracy. . | What will fastai do if you don&#39;t provide a validation set? Fastai will automatically create a validation dataset for us. | Can we always use a random sample for a validation set? Why or why not? It is not reccomended where order is neccessary, example ordered by time. | What is overfitting? Provide an example. This is when the model begins to fit to the training data rather than generalizing for similar unseen datasets. For example a model that does amazing on the training data, but performs poorly on test data: Good indication that model may have overfitted. | What is a metric? How does it differ from &quot;loss&quot;? The loss is the value calculated by the model to determine the impact each neuron has on the end result: Therefore, the value is used by models to measure its performance. The metric gives us, humans, an overall value of how accurate the model was: Therefore, a value we use to understand the models performance. | How can pretrained models help? A pretrained model already has the fundementals. Therefore, it can use this prior knowledge to learn faster and perform better on similer datasets. | What is the &quot;head&quot; of a model? The final layers from the pretrained model that have been replaced with new layers (w/ randomized weights) to better align with our dataset. These final layers are often the only thing trained while the rest of the model is frozen. | What kinds of features do the early layers of a CNN find? How about the later layers? The early layers often extract simple features like edges. The later layers are more complex and can identify advanced features like faces. | Are image models only useful for photos? No. Lots of other forms of data can be converted into images that can be used to solve such non-photo data problems. | What is an &quot;architecture&quot;? This is the structure of the model we use to solve the problem. | What is segmentation? Method of labeling all pixels within an image and masking it. | What is y_range used for? When do we need it? Specifies the range of values that can be perdicted by model. For example, movie rating&#39;s 0-5. | What are &quot;hyperparameters&quot;? These are the parameters that we can adjust to help the model perform better (Ex: Epochs). | What&#39;s the best way to avoid failures when using AI in an organization? Begin with the most simplest model and then slowly building up to more complexity. This way you have something working and don&#39;t get lost as you add onto the model. | Further Research . Each chapter also has a &quot;Further Research&quot; section that poses questions that aren&#39;t fully answered in the text, or gives more advanced assignments. Answers to these questions aren&#39;t on the book&#39;s website; you&#39;ll need to do your own research! . Why is a GPU useful for deep learning? How is a CPU different, and why is it less effective for deep learning? &lt;/br&gt; Modern GPUs provide a far superior processing power, memory bandwidth, and efficiency over the CPU. . | Try to think of three areas where feedback loops might impact the use of machine learning. See if you can find documented examples of that happening in practice. &lt;/br&gt; I believe feedback loops are primarly great for recommendation models. This is because the feedback loops create a bias model. For example, if a viewer like a movie, he/she will like similer movies. Being bias here towards particular types of movie is the best way to keep the viewer engaged. . |",
            "url": "https://usama280.github.io/PasteBlogs/2021/06/28/Lesson1-intro.html",
            "relUrl": "/2021/06/28/Lesson1-intro.html",
            "date": " • Jun 28, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://usama280.github.io/PasteBlogs/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://usama280.github.io/PasteBlogs/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://usama280.github.io/PasteBlogs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://usama280.github.io/PasteBlogs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}